// ARQUIVO   : exp_mod
// DESCRICAO : Exponenciacao modular de polinomios.
// AUTOR     : Inaue Ferreira da Silva
// DATA      : 30/05/2025
// VERSAO    : 1.0
// LICENCA   : GPLv3

// Definindo polinomios

ring racionais_MCs = QQ, (x), Dp;
setring racionais_MCs;

// DESCRICAO    : Divisao euclidiana de polinomios.
// PARAMETRO p1	: polinomio 1
// PARAMETRO p2	: polinomio 2
// RETORNO      : (quociente, resto)

proc divisao_euclidiana(poly p1, poly p2)
{
	poly quociente = 0;
	poly resto     = p1;
	list divisao;

	while(resto != 0 and deg(resto) >= deg(p2))
	{
		divisao   = lead(resto) / lead(p2);
		quociente = quociente + divisao[1];
		resto     = resto - divisao[1] * p2;
	}
	
	return (quociente, resto);
}

// DESCRICAO          : Exponenciacao modular de polinomios.
// PARAMETRO base     : base
// PARAMETRO expoente : expoente
// PARAMETRO m	      : polinomio modulo
// RETORNO            : potencia

proc exp_mod(poly base, int expoente, poly m)
{
	poly resultado = 1;
	list divisao;

	while(expoente != 0)
	{
		if(expoente % 2)
		{
			divisao   = divisao_euclidiana(resultado * base, m);
			resultado = divisao[2];
		}

		expoente = expoente div 2;
		divisao  = divisao_euclidiana(base * base, m);
		base     = divisao[2];
	}

	return (resultado);
}

// Entrada

execute("poly base     = " + read(""));
execute("int  expoente = " + read(""));
execute("poly m        = " + read(""));

// Saida

exp_mod(base, expoente, m);

quit;
