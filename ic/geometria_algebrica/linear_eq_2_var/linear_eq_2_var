ring racionais_MCs = QQ, (x), Dp;
setring racionais_MCs;

proc divisao_euclidiana(poly p1, poly p2)
{
	poly quociente = 0;
	poly resto     = p1;
	list divisao;

	while(resto != 0 and deg(resto) >= deg(p2))
	{
		divisao   = lead(resto) / lead(p2);
		quociente = quociente + divisao[1];
		resto     = resto - divisao[1] * p2;
	}
	
	return (quociente, resto);
}

proc linear_comb_mdc(poly p1, poly p2)
{
	if(p2 == 0)
	{
		return (1 / leadcoef(p1), 0);
	}

	list divisao    = divisao_euclidiana(p1, p2);
	list combinacao = linear_comb_mdc(p2, divisao[2]);

	return (combinacao[2], combinacao[1] - divisao[1] * combinacao[2]);
}

execute("poly a = " + read(""));
execute("poly b = " + read(""));
execute("poly n = " + read(""));

list coeficientes = linear_comb_mdc(a, b);
poly mdc  = coeficientes[1] * a + coeficientes[2] * b;

list divisao = divisao_euclidiana(n, mdc);

if(divisao[2] == 0)
{
	poly fator = divisao[1];

	print(coeficientes[1] * fator);
	print(coeficientes[2] * fator);
}

quit;
